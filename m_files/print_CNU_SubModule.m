function print_CNU_SubModule (fid)
    fprintf(fid, "module get_abs #(parameter quan_width = 6)\n");
    fprintf(fid, "(input wire clk, input wire rst, input wire [7:0] cnt, input wire [7:0] target_cnt, input wire signed [quan_width-1:0] in_data, output reg [quan_width-1:0] out_data);\n");  
    fprintf(fid, "always @ (posedge clk or negedge rst) begin\n");
    fprintf(fid, "    if (!rst) begin out_data <= 0; end\n");
    fprintf(fid, "    else begin\n");
    fprintf(fid, "        if (cnt == target_cnt) begin out_data <= in_data[quan_width-1] == 0 ? in_data : ~in_data + 1; end\n");
    fprintf(fid, "    end\n");
    fprintf(fid, "end\n");
    fprintf(fid, "\n");
    fprintf(fid, "endmodule\n");
    fprintf(fid, "\n");
    fprintf(fid, "module assign_C2V #(parameter quan_width = 6)\n");
    fprintf(fid, "(input wire clk, input wire rst, input wire [3:0] cnt, input wire [3:0] target_cnt, input wire signed [quan_width-1:0] min1,\n");
    fprintf(fid, "input wire signed [quan_width-1:0] min2,input wire signed [quan_width-1:0] V2C, input wire final_sign, output reg signed [quan_width-1:0] C2V);\n");
    fprintf(fid, "reg [quan_width-1:0] tmp;\n");
    fprintf(fid, "always @ (posedge clk or negedge rst) begin\n");
    fprintf(fid, "    if (!rst) begin tmp <= 0; C2V <= 0; end\n");
    fprintf(fid, "    else begin\n");
    fprintf(fid, "        if (cnt == target_cnt) begin\n");
    fprintf(fid, "            if (min1 == V2C || min1 == ~V2C + 1) begin tmp <= min2 * 3 / 4; end\n");
    fprintf(fid, "            else begin tmp <= min1 * 3 / 4; end\n");
    fprintf(fid, "        end\n");
    fprintf(fid, "        else if (cnt == target_cnt + 1) begin\n");
    fprintf(fid, "            if (final_sign == 0) C2V <= tmp;\n");
    fprintf(fid, "            else C2V <= ~tmp + 1;\n");
    fprintf(fid, "        end\n");
    fprintf(fid, "    end\n");
    fprintf(fid, "end\n");
    fprintf(fid, "endmodule\n");
    fprintf(fid, "\n");
    fprintf(fid, "module in2out2 #(parameter quan_width = 6)\n");
    fprintf(fid, "(input wire clk, input wire rst, input wire [7:0] cnt, input wire [7:0] target_cnt, input wire signed [quan_width-1:0] in_data1,\n");
    fprintf(fid, "input wire signed [quan_width-1:0] in_data2, output reg [quan_width-1:0] out_data1, output reg [quan_width-1:0] out_data2);\n");
    fprintf(fid, "    always @ (posedge clk or negedge rst) begin\n");
    fprintf(fid, "        if (!rst) begin out_data1 <= 0; out_data2 <= 0; end\n");
    fprintf(fid, "        else begin\n");
    fprintf(fid, "            if (cnt == target_cnt) begin\n");
    fprintf(fid, "                if (in_data1 > in_data2) begin out_data1 <= in_data2; out_data2 <= in_data1; end\n");
    fprintf(fid, "                else begin out_data1 <= in_data1; out_data2 <= in_data2; end\n");
    fprintf(fid, "            end\n");
    fprintf(fid, "        end\n");
    fprintf(fid, "    end\n");
    fprintf(fid, "endmodule\n");
    fprintf(fid, "\n");
    fprintf(fid, "module in3out2 #(parameter quan_width = 6)\n");
    fprintf(fid, "(input wire clk, input wire rst, input wire [7:0] cnt, input wire [7:0] target_cnt,\n");
    fprintf(fid, "input wire [quan_width-1:0] in_data1, input wire [quan_width-1:0] in_data2, input wire [quan_width-1:0] in_data3,\n");
    fprintf(fid, "output reg [quan_width-1:0] out_data1, output reg [quan_width-1:0] out_data2);\n");
    fprintf(fid, "always @ (posedge clk or negedge rst) begin\n");
    fprintf(fid, "    if (!rst) begin out_data1 <= 0; out_data2 <= 0; end\n");
    fprintf(fid, "    else begin\n");
    fprintf(fid, "        if (cnt == target_cnt) begin\n");
    fprintf(fid, "            if (in_data1 < in_data2) begin\n");
    fprintf(fid, "                if (in_data3 <= in_data1) begin out_data1 <= in_data3; out_data2 <= in_data1; end\n");
    fprintf(fid, "                else if (in_data2 <= in_data3) begin out_data1 <= in_data1; out_data2 <= in_data2; end\n");
    fprintf(fid, "                else begin out_data1 <= in_data1; out_data2 <= in_data3; end\n");
    fprintf(fid, "            end\n");
    fprintf(fid, "            else begin//in_data2 < in_data1\n");
    fprintf(fid, "                if (in_data3 <= in_data2) begin out_data1 <= in_data3; out_data2 <= in_data2; end\n");
    fprintf(fid, "                else if (in_data1 <= in_data3) begin out_data1 <= in_data2; out_data2 <= in_data1; end\n");
    fprintf(fid, "                else begin out_data1 <= in_data2; out_data2 <= in_data3; end\n");
    fprintf(fid, "            end\n");
    fprintf(fid, "        end\n");
    fprintf(fid, "    end\n");
    fprintf(fid, "end\n");
    fprintf(fid, "endmodule\n");
    fprintf(fid, "\n");
    fprintf(fid, "module in4out2 #( parameter quan_width = 6)\n");
    fprintf(fid, "(input wire clk, input wire rst, input wire [7:0] cnt, input wire [7:0] target_cnt, input wire [quan_width-1:0] in_data1,\n");
    fprintf(fid, "input wire [quan_width-1:0] in_data2,input wire [quan_width-1:0] in_data3,input wire [quan_width-1:0] in_data4,\n");
    fprintf(fid, "output reg [quan_width-1:0] out_data1,output reg [quan_width-1:0] out_data2);\n");
    fprintf(fid, "always @ (posedge clk or negedge rst) begin\n");
    fprintf(fid, "    if (!rst) begin out_data1 <= 0; out_data2 <= 0; end\n");
    fprintf(fid, "    else begin\n");
    fprintf(fid, "        if (cnt == target_cnt) begin\n");
    fprintf(fid, "            if (in_data4 <= in_data1) begin out_data1 <= in_data3; out_data2 <= in_data4; end\n");
    fprintf(fid, "            else if (in_data2 <= in_data3) begin out_data1 <= in_data1; out_data2 <= in_data2; end\n");
    fprintf(fid, "            else begin\n");
    fprintf(fid, "                if (in_data3 < in_data1) begin out_data1 <= in_data3; out_data2 <= in_data1; end\n");
    fprintf(fid, "                else begin out_data1 <= in_data1; out_data2 <= in_data3; end\n");
    fprintf(fid, "            end\n");
    fprintf(fid, "        end\n");
    fprintf(fid, "    end\n");
    fprintf(fid, "end\n");
    fprintf(fid, "endmodule\n");
end